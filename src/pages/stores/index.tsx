'use client';

import Image from 'next/image';
import { StoreType } from '@/interface';
import axios from 'axios';
//import { useEffect } from 'react';
import { useInfiniteQuery } from 'react-query';

interface Props {
  stores: StoreType[];
  nextCursor: number | null;
}

//ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Îäî /api/stores?limit=20 ÏöîÏ≤≠Ìï®
//ÏÑúÎ≤ÑÎäî 20Í∞ú Î≥¥ÎÇ¥Ï£ºÍ≥†, ÎßàÏßÄÎßâ ÏïÑÏù¥ÌÖúÏùò idÎ•º nextCursorÎ°ú Ï§å
//ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Îäî Í∑∏Í±∏ lastStoreIdÎ°ú Ï†ÄÏû•ÌïòÍ≥† Îã§Ïùå ÏöîÏ≤≠Ïóê ÏîÄ
export default function StoreListPage({ stores, nextCursor }: Props) {
  // const storesData = () => {
  //   axios
  //     .get(
  //       `${process.env.NEXT_PUBLIC_API_URL}/api/stores?limit=20&cursor=${nextCursor}`
  //     )
  //     .then(res => console.log(res));
  // };

  // useEffect(() => {
  //   storesData();
  // }, []);

  const getGoodPlaceList = async ({ pageParam = null }) => {
    const params: any = { limit: 20 };
    if (pageParam !== null && pageParam !== undefined) {
      params.cursor = pageParam;
    }

    const res = await axios.get(
      `${process.env.NEXT_PUBLIC_API_URL}/api/stores`,
      {
        params,
      }
    );

    return {
      data: res.data.stores, // Î∞∞Ïó¥
      nextCursor: res.data.nextCursor, //Îã§ÏùåÏª§ÏÑú
    };

    // return axios
    //   .get(
    //     `${process.env.NEXT_PUBLIC_API_URL}/api/stores?limit=20&cursor=${nextCursor}`,
    //     {
    //       params: {
    //         limit: 20,
    //         cursor: pageParam,
    //       },
    //     }
    //   )
    //   .then(res => res?.data);
  };

  const {
    data,
    error, // errorÍ∞ùÏ≤¥
    fetchNextPage, // Îã§Ïùå ÌéòÏù¥ÏßÄÎ•º Î∂àÎü¨Ïò§Îäî Ìï®Ïàò
    hasNextPage, // Îã§Ïùå ÌéòÏù¥ÏßÄÍ∞Ä ÏûàÎäîÏßÄ Ïó¨Î∂Ä, Boolean (Í∞ÄÏ†∏Ïò¨ Ïàò ÏûàÎäî Îã§ÏùåÌéòÏù¥ÏßÄÍ∞Ä ÏûàÎäî Í≤ΩÏö∞ true)
    isFetching, // Ï≤´ ÌéòÏù¥ÏßÄ fetching Ïó¨Î∂Ä, Boolean
    isFetchingNextPage, // Ï∂îÍ∞Ä ÌéòÏù¥ÏßÄ fetching Ïó¨Î∂Ä, Boolean (Îã§Ïùå ÌéòÏù¥ÏßÄÎ•º Í∞ÄÏ†∏Ïò§Îäî ÎèôÏïà true)
    status, // loading, error, success Ï§ë ÌïòÎÇòÏùò ÏÉÅÌÉú, string
    //data.pages, //: Î™®Îì† ÌéòÏù¥ÏßÄ Îç∞Ïù¥ÌÑ∞Î•º Ìè¨ÌïúÌïòÎäî Î∞∞Ïó¥Ïù¥Îã§.
    //data.pageParams, //: Î™®Îì† ÌéòÏù¥ÏßÄ Îß§Í∞úÎ≥ÄÏàòÎ•º Ìè¨Ìï®ÌïòÎäî Î∞∞Ïó¥Ïù¥Îã§.
    //fetchPreviousPage : Ïù¥Ï†Ñ ÌéòÏù¥ÏßÄÎ•º fetch Ìï† Ïàò ÏûàÎã§.
    //isFetchingPreviousPage : fetchPreviousPage Î©îÏÑúÎìúÍ∞Ä Ïù¥Ï†Ñ ÌéòÏù¥ÏßÄÎ•º Í∞ÄÏ†∏Ïò§Îäî ÎèôÏïà true
    //hasPreviousPage : Í∞ÄÏ†∏Ïò¨ Ïàò ÏûàÎäî Ïù¥Ï†Ñ ÌéòÏù¥ÏßÄÍ∞Ä ÏûàÏùÑ Í≤ΩÏö∞ true
  } = useInfiniteQuery(
    'goodPlaceList', //dataÏùò Ïù¥Î¶Ñ
    getGoodPlaceList, //fetch callback, ÏúÑ dataÎ•º Î∂àÎü¨Ïò¨ Ìï®Ïàò
    {
      // üí° getNextPageParamsÍ∞Ä Î¨¥ÌïúÏä§ÌÅ¨Î°§Ïùò ÌïµÏã¨Ïù¥Îã§.
      // getNextPageParms Î©îÏÑúÎìúÍ∞Ä falsyÌïú Í∞íÏùÑ Î∞òÌôòÌïòÎ©¥ Ï∂îÍ∞Ä fetchÎ•º Ïã§ÌñâÌïòÏßÄ ÏïäÎäîÎã§.
      // falsyÌïòÏßÄ ÏïäÏùÄ Í∞íÏùÑ returnÌï† Í≤ΩÏö∞ NumberÎ°ú Î¶¨ÌÑ¥Ìï¥Ïïº ÌïúÎã§.
      // ÏúÑÏùò fetch callbackÏùò Ïù∏ÏûêÎ°ú ÏûêÏ¢ÖÏúºÎ°ú pageParamÏùÑ Ï†ÑÎã¨.
      getNextPageParam: lastPage => {
        console.log('üì¶ lastPage:', lastPage.nextCursor);
        return lastPage.nextCursor ?? undefined;
      },
    }
  );

  return (
    <div className="px-4 md:max-w-4xl mx-auto py-8">
      <ul role="list" className="divide-y divide-gray-100">
        {data?.pages
          .flatMap(p => p.data)
          .map((store, index) => (
            <li className="flex justify-between gap-x-6 py-5" key={index}>
              <div className="flex gap-x-4">
                <Image
                  src={
                    store?.category
                      ? `/images/markers/${store?.category}.png`
                      : '/images/markers/default.png'
                  }
                  width={48}
                  height={48}
                  alt="ÏïÑÏù¥ÏΩò Ïù¥ÎØ∏ÏßÄ"
                />
                <div>
                  <div className="text-sm font-semibold leading-6 text-gray-900">
                    {store?.name}
                  </div>
                  <div className="mt-1 text-xs truncate font-semibold leading-5 text-gray-500">
                    {store?.storeType}
                  </div>
                </div>
              </div>
              <div className="hidden sm:flex sm:flex-col sm:items-end">
                <div className="text-sm font-semibold leading-6 text-gray-900">
                  {store?.address}
                </div>
                <div className="mt-1 text-xs truncate font-semibold leading-5 text-gray-500">
                  {store?.phone || 'Î≤àÌò∏ÏóÜÏùå'} | {store?.foodCertifyName} |{' '}
                  {store?.category}
                </div>
              </div>
            </li>
          ))}
      </ul>
    </div>
  );
}

// export async function getServerSideProps() {
//   //console.log('API_URL:', process.env.NEXT_PUBLIC_API_URL);

//   const stores = await axios(`${process.env.NEXT_PUBLIC_API_URL}/api/stores`);

//   return {
//     props: { stores: stores.data },
//   };
// }
